{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["moment","require","App","props","video","React","createRef","canvas","startDate","duration","diff","strings1","strings2","strings3","strings4","strings5","detectFromVideoFrame","model","setTimeout","detect","then","predictions","showDetections","requestAnimationFrame","error","console","log","ctx","getContext","clearRect","width","height","font","textBaseline","forEach","prediction","x","bbox","y","fillStyle","fillText","class","toUpperCase","score","toFixed","setState","systemStatus","personDetected","state","typed2","strings","length","elapsedTime","this","typedStatus","Typed","typeSpeed","backSpeed","showCursor","fadeOut","backDelay","loop","navigator","mediaDevices","getUserMedia","webcamPromise","audio","stream","window","addEventListener","scaleCanvas","current","srcObject","document","getElementsByClassName","play","utc","asMilliseconds","format","typed1","startDelay","typed3","destroy","Promise","resolve","onloadedmetadata","loadModelPromise","cocoSsd","all","values","catch","container","querySelector","getBoundingClientRect","dpr","devicePixelRatio","Math","ceil","style","scale","className","id","src","alt","autoPlay","muted","ref","Component","domContainer","ReactDOM","render","createElement","Boolean","location","hostname","match","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.86961bcd.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Typed from \"typed.js\";\nimport \"@tensorflow/tfjs\";\nimport * as cocoSsd from \"@tensorflow-models/coco-ssd\";\n\nimport \"./App.scss\";\n\nvar moment = require(\"moment\");\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      systemStatus: \"CONNECTING\",\n      personDetected: false,\n      elapsedTime: 0\n    };\n  }\n\n  video = React.createRef();\n  canvas = React.createRef();\n\n  startDate = moment();\n  duration = moment.duration(moment().diff(this.startDate));\n\n  strings1 = [\n    \"CYBERDYNE SYSTEMS <br> SERIES 800 MODEL 101 <br> VERSION 2.4\",\n    \"ANALYSIS: <br> ************ <br> 234654 453 38 <br> 654334 450 16 <br> 245261 856 26 <br> 453665 766 46 <br> 382856 863 09 <br> 356878 544 04 <br> 664217 985 89\",\n    \"DEGREE ABSOLUTE <br><br> CHECKSUM 538904 <br><br> EXTRAPOLATION <br> LEVEL 230 B54 <br><br> GRID PRECISION <br> MODE 45854 223 <br><br> Z-BUFFER 52903 <br> ACCURACY MODE\",\n    \"CODE: <br> ****** <br> 43H4 <br> 4B56 <br> 87YR <br> GER7 <br> 65F8 <br> 65F8 <br> T2GQ <br> 98FT <br><br> 756X <br> 90GF <br> SY77 <br> 64ER <br> TG77 <br><br> EOFX\"\n  ];\n  strings2 = [\n    \"DISCONTINUITY <br> CHRONO 543-665 <br><br> ELAPSED TIME <br> MARK \" +\n      \"00:00:00\",\n    \"AUTO SET LINE <br> MODE 5892 TCB\",\n    \"ADDRESS <br> CHECKSUM <br> VERIFIED <br><br> 45 97543 654 <br> 12 98845 766 <br> 28 23368 336 <br> 35 43645 <br> 31 41592\"\n  ];\n  strings3 = [\n    \"DEFENSE SYSTEMS SET <br> ACTIVE STATUS <br> LEVEL 2347923 MAX\",\n    \"CHECKSUM: 4390 <br><br> TRACKING MODE <br> FULL ISO LEVELS\",\n    \"SEARCH CRITERIA <br> MATCH MODE 5498 <br><br> ALL LEVELS OPERATIVE\"\n  ];\n  strings4 = [\n    \"SCAN MODE 43984 <br> SIZE ASSESSMENT <br><br> ASSESSMENT COMPLETE <br> DEFENSE SYSTEM SET <br><br> GRID PRECISION\",\n    \"CRITERIA <br> ************ <br> HGHT  626 <br> WGHT  291 <br> NECK  554 <br> SHLD  326 <br> BACK  514 <br> INSM  321 <br> SLEV  062 <br> CHST  619 <br> COLR  180 <br> BICP  213 <br> QUAD  545 <br> THGH  505\",\n    \"FIT PROBABILITY 0.99 <br><br> RESET TO ACQUISITION <br> MODE SPEECH LEVEL 100 <br><br> PRIORITY OVERRIDE\"\n  ];\n  strings5 = [\"CONNECTING\", \"DIAGNOSTIC\", \"THREAT ASSESSMENT\", \"ANALYSIS\"];\n\n  detectFromVideoFrame = (model, video) => {\n    // Added delay for smoother HUD text display\n    setTimeout(\n      () =>\n        model.detect(video).then(\n          predictions => {\n            this.showDetections(predictions);\n\n            requestAnimationFrame(() => {\n              this.detectFromVideoFrame(model, video);\n            });\n          },\n          error => {\n            console.log(\"Couldn't start the webcam\");\n            console.error(error);\n          }\n        ),\n      1000\n    );\n  };\n\n  showDetections = predictions => {\n    const ctx = this.canvas.getContext(\"2d\");\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    const font = \"600 24px Arial\";\n    ctx.font = font;\n    ctx.textBaseline = \"top\";\n\n    predictions.forEach(prediction => {\n      const x = prediction.bbox[0];\n      const y = prediction.bbox[1];\n      const width = prediction.bbox[2];\n      const height = prediction.bbox[3];\n\n      // Draw the text last to ensure it's on top.\n      ctx.fillStyle = \"#FFFFFF\";\n      ctx.fillText(\"VISUAL:\", x + width, y + height);\n      ctx.fillText(prediction.class.toUpperCase(), x + width, y + height + 24);\n      ctx.fillText(\n        prediction.score.toFixed(2) + \" MATCH\",\n        x + width,\n        y + height + 48\n      );\n\n      /*  Specialized HUD Info */\n\n      // 'Threat Detection'\n      if (\n        prediction.class === \"knife\" ||\n        prediction.class === \"baseball bat\" ||\n        prediction.class === \"scissors\" ||\n        prediction.class === \"sword\" ||\n        prediction.class === \"gun\"\n      ) {\n        this.setState({\n          systemStatus: \"Threat Assessment\"\n        });\n      } else {\n        this.setState({\n          systemStatus: \"\"\n        });\n      }\n\n      // Person Detection\n      if (prediction.class === \"person\") {\n        this.setState({\n          personDetected: true\n        });\n      }\n      if (this.state.personDetected === true) {\n        this.typed2.strings = this.strings4;\n      }\n    });\n\n    if (predictions.length === 0) {\n      this.setState({\n        personDetected: false\n      });\n      this.typed2.strings = this.strings2;\n    }\n  };\n\n  componentDidMount() {\n    this.typedStatus = new Typed(\"#typedStatus\", {\n      strings: this.strings5,\n      typeSpeed: 0,\n      backSpeed: 0,\n      showCursor: true,\n      fadeOut: true,\n      backDelay: 3000,\n      loop: false\n    });\n\n    if (navigator.mediaDevices.getUserMedia) {\n      // define a Promise that'll be used to load the webcam and read its frames\n      const webcamPromise = navigator.mediaDevices\n        .getUserMedia({\n          video: true,\n          audio: false\n        })\n        .then(\n          stream => {\n            window.addEventListener(\"resize\", this.scaleCanvas());\n            window.stream = stream;\n            this.video.current.srcObject = stream;\n\n            \n    const audioEl = document.getElementsByClassName(\"audio-element\")[0]\n    audioEl.play();\n\n            this.setState({\n              systemStatus: \"\",\n              elapsedTime: moment\n                .utc(this.duration.asMilliseconds())\n                .format(\"HH:mm:ss\")\n            });\n\n            // Normal HUD info\n\n            this.typed1 = new Typed(\"#typed1\", {\n              strings: this.strings1,\n              typeSpeed: 0,\n              backSpeed: 0,\n              showCursor: false,\n              fadeOut: true,\n              startDelay: 1500,\n              backDelay: 3000,\n              loop: true\n            });\n\n            this.typed2 = new Typed(\"#typed2\", {\n              strings: this.strings2,\n              typeSpeed: 0,\n              backSpeed: 0,\n              showCursor: false,\n              fadeOut: true,\n              startDelay: 3000,\n              backDelay: 3000,\n              loop: true\n            });\n\n            this.typed3 = new Typed(\"#typed3\", {\n              strings: this.strings3,\n              typeSpeed: 0,\n              backSpeed: 0,\n              showCursor: false,\n              fadeOut: true,\n              startDelay: 5000,\n              backDelay: 3000,\n              loop: true\n            });\n\n            this.typedStatus.destroy();\n\n            return new Promise(resolve => {\n              this.video.current.onloadedmetadata = () => {\n                resolve();\n              };\n            });\n          },\n          error => {\n            console.log(\"Couldn't start the webcam\");\n            console.error(error);\n          }\n        );\n\n      // define a Promise that'll be used to load the model\n      const loadModelPromise = cocoSsd.load();\n\n      // resolve all the Promises\n      Promise.all([loadModelPromise, webcamPromise])\n        .then(values => {\n          this.detectFromVideoFrame(values[0], this.video.current);\n          this.setState({\n            elapsedTime: moment\n              .utc(this.duration.asMilliseconds())\n              .format(\"HH:mm:ss\")\n          });\n        })\n        .catch(error => {\n          console.error(error);\n        });\n    }\n  }\n\n  componentWillUnmount() {\n    this.typed1.destroy();\n    this.typed2.destroy();\n    this.typed3.destroy();\n    this.typedStatus.destroy();\n  }\n\n  scaleCanvas() {\n    console.log(\"Scaling...\");\n    const container = document.querySelector(\"#container\");\n    const canvas = document.querySelector(\"#canvas\");\n\n    // Get desired dimensions for canvas from container.\n    let { width, height } = container.getBoundingClientRect();\n\n    // Get pixel ratio.\n    const dpr = window.devicePixelRatio;\n\n    // Size the canvas a bit bigger than desired.\n    // Use exaggeration = 0 in real code.\n    const exaggeration = 20;\n    width = Math.ceil(width * dpr + exaggeration);\n    height = Math.ceil(height * dpr + exaggeration);\n\n    // Set the canvas resolution dimensions (integer values).\n    canvas.width = width;\n    canvas.height = height;\n\n    canvas.style.width = `${width / dpr}px`;\n    canvas.style.height = `${height / dpr}px`;\n\n    // Adjust canvas coordinates to use CSS pixel coordinates.\n    const ctx = canvas.getContext(\"2d\");\n    ctx.scale(dpr, dpr);\n\n    this.canvas = canvas;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"scanlines\" id=\"container\">\n          <div id=\"typed1\" className=\"typed\" />\n          <div id=\"typed2\" className=\"typed\" />\n          <div id=\"typed3\" className=\"typed\" />\n          <div id=\"typedStatus\" className=\"typed blink\" />\n          <div id=\"status\" className=\"system-status\">\n            <span id=\"cursor\" className=\"blink-fast\">\n              {this.state.systemStatus !== \"\" ? \"█\" : null}\n            </span>\n          </div>\n          <img className=\"compass\" src=\"images/Compass.svg\" alt=\"Compass\" />\n          <video\n            className=\"main-video\"\n            autoPlay\n            muted\n            ref={this.video}\n            width=\"100%\"\n            height=\"100%\"\n          />\n          <canvas id=\"canvas\" className=\"overlay-red\" />\n          <audio className=\"audio-element\">\n            <source src=\"audio/t800-sfx.mp3\"></source>\n          </audio>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst domContainer = document.querySelector(\"#root\");\nReactDOM.render(React.createElement(App), domContainer);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}